//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Controls/InputController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputController : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputController"",
    ""maps"": [
        {
            ""name"": ""PlayerMovement"",
            ""id"": ""f28b995e-dff6-45a8-ad58-39002dbb4165"",
            ""actions"": [
                {
                    ""name"": ""MoveDirection"",
                    ""type"": ""Value"",
                    ""id"": ""0839f62e-cc59-4330-a3ae-af3d6ce290b0"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a375ebcc-3645-4c68-9f78-fb1b6569e767"",
                    ""path"": ""<AndroidJoystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDirection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SpecialAbility"",
            ""id"": ""3f622df3-3520-4197-8318-5abbab007128"",
            ""actions"": [
                {
                    ""name"": ""UseSpecialAbility"",
                    ""type"": ""Button"",
                    ""id"": ""e2fa195a-4c2e-4cff-94de-6ce421483b5d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0ece8c00-d56b-424b-a66c-420455e97611"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseSpecialAbility"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerMovement
        m_PlayerMovement = asset.FindActionMap("PlayerMovement", throwIfNotFound: true);
        m_PlayerMovement_MoveDirection = m_PlayerMovement.FindAction("MoveDirection", throwIfNotFound: true);
        // SpecialAbility
        m_SpecialAbility = asset.FindActionMap("SpecialAbility", throwIfNotFound: true);
        m_SpecialAbility_UseSpecialAbility = m_SpecialAbility.FindAction("UseSpecialAbility", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMovement
    private readonly InputActionMap m_PlayerMovement;
    private IPlayerMovementActions m_PlayerMovementActionsCallbackInterface;
    private readonly InputAction m_PlayerMovement_MoveDirection;
    public struct PlayerMovementActions
    {
        private @InputController m_Wrapper;
        public PlayerMovementActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveDirection => m_Wrapper.m_PlayerMovement_MoveDirection;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterface != null)
            {
                @MoveDirection.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMoveDirection;
                @MoveDirection.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMoveDirection;
                @MoveDirection.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnMoveDirection;
            }
            m_Wrapper.m_PlayerMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveDirection.started += instance.OnMoveDirection;
                @MoveDirection.performed += instance.OnMoveDirection;
                @MoveDirection.canceled += instance.OnMoveDirection;
            }
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // SpecialAbility
    private readonly InputActionMap m_SpecialAbility;
    private ISpecialAbilityActions m_SpecialAbilityActionsCallbackInterface;
    private readonly InputAction m_SpecialAbility_UseSpecialAbility;
    public struct SpecialAbilityActions
    {
        private @InputController m_Wrapper;
        public SpecialAbilityActions(@InputController wrapper) { m_Wrapper = wrapper; }
        public InputAction @UseSpecialAbility => m_Wrapper.m_SpecialAbility_UseSpecialAbility;
        public InputActionMap Get() { return m_Wrapper.m_SpecialAbility; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpecialAbilityActions set) { return set.Get(); }
        public void SetCallbacks(ISpecialAbilityActions instance)
        {
            if (m_Wrapper.m_SpecialAbilityActionsCallbackInterface != null)
            {
                @UseSpecialAbility.started -= m_Wrapper.m_SpecialAbilityActionsCallbackInterface.OnUseSpecialAbility;
                @UseSpecialAbility.performed -= m_Wrapper.m_SpecialAbilityActionsCallbackInterface.OnUseSpecialAbility;
                @UseSpecialAbility.canceled -= m_Wrapper.m_SpecialAbilityActionsCallbackInterface.OnUseSpecialAbility;
            }
            m_Wrapper.m_SpecialAbilityActionsCallbackInterface = instance;
            if (instance != null)
            {
                @UseSpecialAbility.started += instance.OnUseSpecialAbility;
                @UseSpecialAbility.performed += instance.OnUseSpecialAbility;
                @UseSpecialAbility.canceled += instance.OnUseSpecialAbility;
            }
        }
    }
    public SpecialAbilityActions @SpecialAbility => new SpecialAbilityActions(this);
    public interface IPlayerMovementActions
    {
        void OnMoveDirection(InputAction.CallbackContext context);
    }
    public interface ISpecialAbilityActions
    {
        void OnUseSpecialAbility(InputAction.CallbackContext context);
    }
}
